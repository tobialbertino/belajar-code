library(rgl)
library(rgl)
# Random.Unit returns n dim-dimensional points in the unit interval labeled
# -1 or 1. The label depends on whether or not the sum of the vector's
# components exceeds the given threshold. That is, -1 if sum(vector) < threshold
# and 1 otherwise.
Random.Unit <-function(n, dim, threshold) {
points <- runif(n * dim)
points <- matrix(points, ncol = dim)
label <- ifelse(apply(points, 1, sum) < threshold, -1, 1)
return(cbind(label, x0 = rep(1, n), points))
}
# Classify is our simple classification rule for the perceptron.We simply
# return the sign of the dot-product of our observations and weights
Classify <- function(x, weights) {
return(sign(x %*% weights))
}
# Perceptron is a simple implementation of the perceptron learning algorithm.
# It accepts data of the form data[1] = label, data[2] = x_0 = 1, data[3] = x_1,
# etc. w0 is initilized to -threshold and the weights returned are such that
# sign(w_0 * x_0 + w_1 * x_1 + ... + w_n * x_n) == label
Perceptron <- function(data, threshold) {
w <- c(-threshold, runif(ncol(data) - 2))
n <- nrow(data)
label <- data[ , 1]
obs <- data[ , 2:ncol(data)]
misclassfied <- TRUE
while (misclassfied) {
misclassfied <- FALSE
for (i in 1:n) {
if (label[i] * Classify(obs[i , ], w) <= 0) {
w <- w + label[i] * obs[i , ]
misclassfied <- TRUE
}
}
}
return(w)
}
# Plot3D is essentially a wrapper for the rgl package's plot3d function.
# It plots the result of a call to Random.Unit with dim = 3
# as well as the plane parameterized by ax + by + cz + d = 0
Plot3D <- function(points, a, b, c, d) {
plot3d(points[, 3:5], xlab = "X", ylab = "Y", zlab = "Z",
pch = ifelse(points[, 1] == 1, 2, 8),
col = ifelse(points[, 1] == 1, "blue", "red"))
planes3d(a, b, c, d)
}
# Plot2D plots the result of a call to Random.Unit with dim = 2 as well
# as the line parameterized by y = bx + a, as in the call to abline.
Plot2D <- function(points, a, b) {
plot(points[, 3:4], xlab = "X", ylab = "Y",
pch = ifelse(points[, 1] == 1, 2, 8),
col = ifelse(points[, 1] == 1, "blue", "red"))
abline(a, b)
}
THRESHOLD <- 1.5
pts <- Random.Unit(1000, 3, THRESHOLD)
Plot3D(pts, 1, 1, 1, -THRESHOLD)
w <- Perceptron(pts, THRESHOLD)
Plot3D(pts, w[4], w[3], w[2], w[1])
THRESHOLD <- 0.75
pts <- Random.Unit(1000, 2, THRESHOLD)
Plot2D(pts, THRESHOLD, -1)
w <- Perceptron(pts, THRESHOLD)
Plot2D(pts, -w[1]/w[3], -w[2]/ w[3])
View(Plot3D)
View(Plot2D)
View(Random.Unit)
View(Plot3D)
library(rgl)
# Random.Unit returns n dim-dimensional points in the unit interval labeled
# -1 or 1. The label depends on whether or not the sum of the vector's
# components exceeds the given threshold. That is, -1 if sum(vector) < threshold
# and 1 otherwise.
# fungsi untuk membuat data random dengan argumen(n, dimensi, treshold)
Random.Unit <-function(n, dim, threshold) {
# membuat bilanganc random [0-1] sebanyak n * dimensi
points <- runif(n * dim)
# mengubah kedalam bentuk matriks, jmlh kolom=dimensi
points <- matrix(points, ncol = dim)
# memberi nama label -1 / 1 pada tiap titik sesuai nilai treshold
label <- ifelse(apply(points, 1, sum) < threshold, -1, 1)
# mengembalikan nilai matriks yg sudah diberi dilabel
return(cbind(label, x0 = rep(1, n), points))
}
# Classify is our simple classification rule for the perceptron.We simply
# return the sign of the dot-product of our observations and weights
# fungsi classify argumen (x, bobot)
Classify <- function(x, weights) {
# Mengembalikan nilai yang sesuai dengan bobot yang baru
return(sign(x %*% weights))
}
# Perceptron is a simple implementation of the perceptron learning algorithm.
# It accepts data of the form data[1] = label, data[2] = x_0 = 1, data[3] = x_1,
# etc. w0 is initilized to -threshold and the weights returned are such that
# sign(w_0 * x_0 + w_1 * x_1 + ... + w_n * x_n) == label
# fungsi perceptron argumen(dataMatrix, treshold)
Perceptron <- function(data, threshold) {
# menghitung nilai awal w
w <- c(-threshold, runif(ncol(data) - 2))
# mengambil banyaknya bilangan acak
n <- nrow(data)
# panggil label yg sudah dibuat
label <- data[ , 1]
obs <- data[ , 2:ncol(data)]
# menganggap ada bilangan salah yang diberikan label
misclassfied <- TRUE
while (misclassfied) {
# mengubah label bilangan agar label menjadi lebih tepat
misclassfied <- FALSE
for (i in 1:n) {
# Jika label i berbeda dengan nilai yang dikembalikan oleh
# fs classify, maka bobot input diubah
if (label[i] * Classify(obs[i , ], w) <= 0) {
w <- w + label[i] * obs[i , ]
misclassfied <- TRUE
}
}
}
# mengembalikan nilai bobot
return(w)
}
# Plot3D is essentially a wrapper for the rgl package's plot3d function.
# It plots the result of a call to Random.Unit with dim = 3
# as well as the plane parameterized by ax + by + cz + d = 0
# fungsi untuk membuat plot 3D
Plot3D <- function(points, a, b, c, d) {
# visualisasi data 3D, 3 matriks terakhir= x, y, z
plot3d(points[, 3:5], xlab = "X", ylab = "Y", zlab = "Z",
pch = ifelse(points[, 1] == 1, 2, 8),
col = ifelse(points[, 1] == 1, "blue", "red"))
planes3d(a, b, c, d)
}
# Plot2D plots the result of a call to Random.Unit with dim = 2 as well
# as the line parameterized by y = bx + a, as in the call to abline.
# fungsi untuk membuat plot 2D
Plot2D <- function(points, a, b) {
# visualisasi data 2D, 2 matriks terakhir= x, y
plot(points[, 3:4], xlab = "X", ylab = "Y",
pch = ifelse(points[, 1] == 1, 2, 8),
col = ifelse(points[, 1] == 1, "blue", "red"))
abline(a, b)
}
# main program
# tentukan nilai treshold
THRESHOLD <- 1.5
# menentukan data random, sebanyak 1000 data
# 3 dimensi, & nilai treshold yg ditentukan
pts <- Random.Unit(1000, 3, THRESHOLD)
# membuat plot 3D dengan argumen(data, x, y, z, treshold)
Plot3D(pts, 1, 1, 1, -THRESHOLD)
# mengubah bobot dengan fungsi perceptron
w <- Perceptron(pts, THRESHOLD)
# mencetak visualisasi setelah diubah perceptron
Plot3D(pts, w[4], w[3], w[2], w[1])
fungsi = function(x) {
(2*(x^2)) + (4*x) + 5
}
fungsi = function(x) {
(2*(x^2)) + (4*x) + 5
}
N = 4
x = c(-4, -3, 2, 5)
v = c(0, 0, 0, 0)
c1 = c2 = 1
omega = c(0.77, 0.58, 0.42, 0.26, 0.1)
r1 = c(0.1, 0.1, 0.4, 0.2, 0.7)
r2 = c(0.2, 0.1, 0.4, 0.6, 1)
iteration = 5
# inisiasi
fitness = fungsi(x)
pbest = x
gbest = x[which.min(fitness)]
pbest_fitness = fungsi(x)
gbest_fitness = fungsi(gbest)
fitness
pbest
gbest
pbest_fitness
gbest_fitness
# iteration
for (i in 1:iteration) {
print(paste0("Iterasi: ", i))
# update velocity/iteration
for (j in 1:N) {
v[j] = omega[i] * v[j] + c1*r1[i]*(pbest[j] - x[j]) +
c2*r2[i]*(gbest - x[j])
x[j] = x[j] + v[j]
}
print(paste0("nilai x:"))
print(x)
print(paste0("nilai v:"))
print(v)
# update pbest & gbest/iteration
fitness = fungsi(x)
for (j in 1:N) {
if(fitness[j] < pbest_fitness[j]) {
pbest[j] = x[j]
pbest_fitness[j] = fitness[j]
}
if(fitness[j] < gbest_fitness) {
gbest = x[j]
gbest_fitness = fitness[j]
}
}
print(paste0("fitness : "))
print(fitness)
print(paste0("pbest : "))
print(pbest)
print(paste0("gbest : "))
print(gbest)
cat('\n')
}
